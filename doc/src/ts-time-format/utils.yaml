# MIT License
#
# Copyright (c) 2019-2022 Egor Nepomnyaschih
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

symbols:
  parsePattern:
    signature: |
      (pattern: string, compilers: Dictionary<%TemporalCompiler<T>>): %TemporalFormatComponent<T>[]
    params:
      pattern: Pattern string.
      compilers: Dictionary from supported pattern characters to the respective compilers.
    result: Array of format components in the same order.
    description: |
      <p>Patterns are based on a simple sequence of characters. Pattern can be used to create formatters
      using their ofPattern static methods. For example:</p>
      <pre>
      const date = %LocalDate.%of(2011, %DECEMBER, 3),
          formatter = %DateFormatter.%ofPattern("d MMM uuuu");
      // equivalent to:
      //  formatter = %DateFormatter.%of2(%parsePattern("d MMM uuuu", %DATE_COMPILERS));
      expect(formatter.%format(date)).equal("3 Dec 2011");
      </pre>
      <p>A formatter created from a pattern can be used as many times as necessary, it is immutable.</p>
      <p>Only characters defined in compilers are reserved as pattern characters. The count of consequent pattern
      characters determines the format. To write them as non-pattern characters, surround them with single quote '
      symbols. All other characters don't need to be surrounded. To write a single quote, use two subsequent single
      quotes:</p>
      <pre>
      const date = %LocalDate.%of(2011, %DECEMBER, 3),
          formatter = %DateFormatter.%ofPattern("'Mud'dr''");
      expect(formatter.%format(date)).equal("Mud3r'");
      </pre>
    references:
      of:
        file: ts-time/LocalDate
        member: of
        static: true
      ofPattern:
        file: ts-time-format/DateFormatter
        member: ofPattern
        static: true
      of2:
        file: ts-time-format/DateFormatter
        member: of
        static: true
        label: of
      format:
        file: ts-time-format/TemporalFormatter
        member: format
