# MIT License
#
# Copyright (c) 2019-2022 Egor Nepomnyaschih
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

title: ts-time

description: |
  <div class="container">
    <div class="jumbotron">
      <h1 class="display-4">ts-time</h1>
      <p class="lead">TypeScript/JavaScript library of immutable date/time models with time zone support.</p>
      <hr class="my-4">
      <p>This library mimics <a href="https://www.baeldung.com/java-8-date-time-intro" target="_blank">Java 8 Date/Time API</a>,
      adjusting its API to the best practices of TypeScript and JavaScript. It uses %DateTimeFormat
      API to detect time zone offsets, providing efficient and reliable time zone support in your client code.</p>
    </div>
    <h3>ts-time</h3>
    <p>ts-time is available as <a href="https://www.npmjs.com/package/ts-time" target="_blank">npm package</a>.</p>
    <pre>
    npm install --save ts-time
    </pre>
    <p>ts-time features:</p>
    <ul>
      <li>Various useful %coreConstants.</li>
      <li>%Instant class representing an instant of time without time zone relation.</li>
      <li>%LocalDate, %LocalTime, %LocalDateTime classes representing dates and times without time zone relation.</li>
      <li>%ZoneId, %ZoneOffset classes representing time zones and time zone offsets.</li>
      <li>%ZonedDateTime and %OffsetDateTime classes representing an instant of time in a specific time zone or time zone offset.</li>
      <li>%Duration and %Period classes representing time intervals.</li>
      <li>%DayOfWeek, %Month and %Era classes and constants representing certain calendar terms.</li>
      <li>and many other...</li>
    </ul>
    <p>ts-time is a pure definitely-typed object-oriented solution. Any code fragment developed with ts-time is easy to
    read, understand and maintain, because it manipulates data structures serving specific purposes:</p>
    <pre>
    import %LocalDate from "ts-time/LocalDate";
    import %Period from "ts-time/Period";

    function buildGraduation(from: %LocalDate, to: %LocalDate, step: %Period) {
      const result: %LocalDate[] = [];
      while (from.%isBefore(to)) {
        result.push(from);
        from = from.%plus(step);
      }
      return result;
    }
    </pre>
    <p>All data structures defined in ts-time are immutable. Thanks to this, you can be sure that your values never get
    spoiled when you pass them to a third party function or component. For third parties that don't support ts-time
    data structures, you may convert the structures to native Date or milliseconds and back.</p>
    <p>None of the defined data structures has public constructors. You should use static methods to initialize them.
    Methods starting with "of" create new instances by parameters. Methods starting with "from" convert the structures
    to each other. Methods "parse" create new instances by strings, that are always compatible with "toString".</p>
    <hr>
    <h3>ts-time-format</h3>
    <p><a href="https://www.npmjs.com/package/ts-time-format" target="_blank">ts-time-format</a> is an extension of
    ts-time library with date/time formatting capabilities.</p>
    <pre>
    npm install --save ts-time-format
    </pre>
    <p>As opposed to ts-time, ts-time-format API is very different from Java 8 Date/Time API, because its author finds
    Java API for date/time formatting way too loose and error-prone. Implementation of ts-time-format is more strict -
    for every class of ts-time there's a specialized implementation of %TemporalFormatter supporting its own set of
    features. The library doesn't support date/time parsing by an arbitrary pattern.</p>
    <h3>Examples</h3>
    <h4>1. %LocalDate, %DateFormatter, %Period: Print a calendar for June 2022</h4>
    <p>%LocalDate stores a date without attachment to time or a time zone. It works the best when you want to build
    a time zone agnostic calendar.</p>
    <pre>
    const startDate = %LocalDate.%ofOfLocalDate(2022, %JUNE);
    const formatter = %DateFormatter.%ofPatternOfDateFormatter("d - EE");
    for (let date = startDate; date.%monthOfLocalDate === startDate.%monthOfLocalDate; date = date.%plusOfLocalDate(%DAY_PERIOD)) {
      console.log(formatter.%formatOfDateFormatter(date));
    }
    </pre>
    <p>Prints:</p>
    <pre>
    1 - Wednesday
    2 - Thursday
    3 - Friday
    ...
    30 - Thursday
    </pre>
    <h4>2. %LocalTime, %Duration: School scheduling</h4>
    <p>%LocalTime stores time without attachment to a date or a time zone. It works the best when you want to build
    a schedule for a day that can be reused all across the school semester.</p>
    <pre>
    const startTime = %LocalTime.%ofOfLocalTime(9); // 9:00 AM
    const schedule: %Duration[] = [
      %Duration.%ofMinutes(90), // First lesson
      %Duration.%ofMinutes(10), // Break
      %Duration.%ofMinutes(90), // Second lesson
      %Duration.%ofHours(1),    // Lunch time
      %Duration.%ofHours(2),    // Third lesson
    ];
    const endTime = schedule.reduce((time, duration) => time.%plusOfLocalTime(duration), startTime);

    // Alternatively:
    const totalDuration = schedule.reduce((x, y) => x.%plusOfDuration(y), %NULL_DURATION);
    const endTime = startTime.%plusOfLocalTime(totalDuration);

    console.log(endTime.%toStringOfLocalTime()); // Prints: 15:10:00.000
    </pre>
    <h4>3. %LocalDateTime: Simple in-game clock</h4>
    <p>%LocalDateTime is a simple date and time presentation perfect for scenarios when you don't care about time zones.
    For example, when you develop a game like town construction simulator.<p>
    <pre>
    const startInGameTime = %LocalDateTime.%parseOfLocalDateTime("2200-01-01T00:00:00.000");
    const inGameTimeElapsed = %Duration.%ofComponentsOfDuration(45, 3, 12, 44); // 45 days 3 hours 12 minutes 44 seconds
    const currentInGameTime = startInGameTime.%plusDurationOfLocalDateTime(inGameTimeElapsed);
    console.log(currentInGameTime.%toStringOfLocalDateTime()); // Prints: 2200-02-15T03:12:44.000
    </pre>
    <h4>4. %ZonedDateTime, %ZoneId, %Instant: Compute plane arrival time</h4>
    <p>%ZonedDateTime stores date and time attached to a specific time zone. When converting it to a different time
    zone, you must make a decision: do you want to preserve an %instantOfZonedDateTime or a %dateTimeOfZonedDateTime.
    In this example, we preserve an %instantOfZonedDateTime, because that's what is important for us.</p>
    <pre>
    const departureTime = %ZonedDateTime.%parseOfZonedDateTime("2022-06-15T18:30:00.000+02:00[Europe/Berlin]");
    const arrivalTimeZone = %ZoneId.%ofOfZoneId("Europe/London");
    const flightDuration = %Duration.%ofComponentsOfDuration(0, 1, 50); // 0 days 1 hour 50 minutes

    const arrivalTime = departureTime.%instantOfZonedDateTime.%plusOfInstant(flightDuration).%atZoneOfInstant(arrivalTimeZone);

    // Alternatively (less intuitive, but still correct):
    const arrivalTime = departureTime.%plusDuration(flightDuration).%instantOfZonedDateTime.%atZoneOfInstant(arrivalTimeZone);

    console.log(arrivalTime.%toStringOfZonedDateTime()); // Prints: 2022-06-15T19:20:00.000+01:00[Europe/London]
    </pre>
    <p>%OffsetDateTime is similar to %ZonedDateTime, but it doesn't take time zone shifts (such as daylight saving time)
    into consideration, thus typically shouldn't be used.</p>
    <h3>Browser support</h3>
    <p>Microsoft Edge, Google Chrome, Mozilla Firefox, NodeJS: full support.</p>
    <p>Internet Explorer 11: all features except local time zones are supported. All local time zones have zero offset.</p>
    <p>Other browsers: not tested.</p>
    <p>Project license is <a href="https://github.com/enepomnyaschih/ts-time/blob/master/LICENSE" target="_blank">MIT</a>.</p>
    <p>Find source code and bug tracker at <a href="https://github.com/enepomnyaschih/ts-time" target="_blank">GitHub</a>.</p>
  </div>

references:
  isBefore:
    file: ts-time/LocalDate
    member: isBefore
  plus:
    file: ts-time/LocalDate
    member: plus
  ofOfLocalDate:
    file: ts-time/LocalDate
    member: of
    static: true
    label: of
  ofPatternOfDateFormatter:
    file: ts-time-format/DateFormatter
    member: ofPattern
    static: true
    label: ofPattern
  plusOfLocalDate:
    file: ts-time/LocalDate
    member: plus
    label: plus
  monthOfLocalDate:
    file: ts-time/LocalDate
    member: month
    label: month
  formatOfDateFormatter:
    file: ts-time-format/DateFormatter
    member: format
    static: true
    label: format
  ofOfLocalTime:
    file: ts-time/LocalTime
    member: of
    static: true
    label: of
  ofMinutes:
    file: ts-time/Duration
    member: ofMinutes
  ofHours:
    file: ts-time/Duration
    member: ofHours
  plusOfLocalTime:
    file: ts-time/LocalTime
    member: plus
    label: plus
  plusOfDuration:
    file: ts-time/Duration
    member: plus
    label: plus
  NULL_DURATION:
    file: ts-time/Duration
    symbol: NULL_DURATION
  toStringOfLocalTime:
    file: ts-time/LocalTime
    member: toString
    label: toString
  parseOfZonedDateTime:
    file: ts-time/ZonedDateTime
    member: parse
    static: true
    label: parse
  ofOfZoneId:
    file: ts-time/Zone
    symbol: ZoneId
    member: of
    static: true
    label: of
  ofComponentsOfDuration:
    file: ts-time/Duration
    member: ofComponents
    static: true
    label: ofComponents
  instantOfZonedDateTime:
    file: ts-time/ZonedDateTime
    member: instant
    label: instant
  dateTimeOfZonedDateTime:
    file: ts-time/ZonedDateTime
    member: dateTime
    label: dateTime
  plusOfInstant:
    file: ts-time/Instant
    member: plus
    label: plus
  plusDuration:
    file: ts-time/ZonedDateTime
    member: plusDuration
  atZoneOfInstant:
    file: ts-time/Instant
    member: atZone
    label: atZone
  toStringOfZonedDateTime:
    file: ts-time/ZonedDateTime
    member: toString
    label: toString
  parseOfLocalDateTime:
    file: ts-time/LocalDateTime
    member: parse
    static: true
    label: parse
  plusDurationOfLocalDateTime:
    file: ts-time/LocalDateTime
    member: plusDuration
    label: plusDuration
  toStringOfLocalDateTime:
    file: ts-time/LocalDateTime
    member: toString
    label: toString
