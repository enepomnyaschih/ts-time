# MIT License
#
# Copyright (c) 2019 Egor Nepomnyaschih
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

title: ts-time

description: |
  <div class="container">
    <div class="jumbotron">
      <h1 class="display-4">ts-time</h1>
      <p class="lead">TypeScript/JavaScript library of immutable date/time models with time zone support.</p>
      <hr class="my-4">
      <p>This library mimics <a href="https://www.baeldung.com/java-8-date-time-intro" target="_blank">Java 8 Date/Time API</a>,
      adjusting its API to the best practices of TypeScript and JavaScript. It uses %DateTimeFormat
      API to detect time zone offsets, providing efficient and reliable time zone support in your client code.</p>
    </div>
    <p>ts-time is available as <a href="https://www.npmjs.com/package/ts-time" target="_blank">npm package</a>.</p>
    <pre>
    npm install --save ts-time
    </pre>
    <p>ts-time features:</p>
    <ul>
      <li>Various useful %constants.</li>
      <li>%Instant class representing an instant of time without time zone relation.</li>
      <li>%LocalDate, %LocalTime, %LocalDateTime classes representing dates and times without time zone relation.</li>
      <li>%ZoneId, %ZoneOffset classes representing time zones and time zone offsets.</li>
      <li>%ZonedDateTime and %OffsetDateTime classes representing an instant of time in a specific time zone or time zone offset.</li>
      <li>%Duration and %Period classes representing time intervals.</li>
      <li>%DayOfWeek, %Month and %Era classes and constants representing certain calendar terms.</li>
      <li>and many other...</li>
    </ul>
    <p>ts-time is a pure definitely-typed object-oriented solution. Any code fragment developed with ts-time is easy to
    read, understand and maintain, because it manipulates data structures serving specific purposes:</p>
    <pre>
    import %LocalDate from "ts-time/LocalDate";
    import %Period from "ts-time/Period";

    function buildGraduation(from: %LocalDate, to: %LocalDate, step: %Period) {
      const result: %LocalDate[] = [];
      while (from.%isBefore(to)) {
        result.push(from);
        from = to.%plus(step);
      }
      return result;
    }
    </pre>
    <p>All data structures defined in ts-time are immutable. Thanks to this, you can be sure that your values never get
    spoiled when you pass them to a third party function or component. For third parties that don't support ts-time
    data structures, you may convert the structures to native Date or milliseconds and back.</p>
    <p>None of the defined data structures has public constructors. You should use static methods to initialize them.
    Methods starting with "of" create new instances by parameters. Methods starting with "from" convert the structures
    to each other. Methods "parse" create new instances by strings, that are always compatible with "toString".</p>
    <hr>
    <p><a href="https://www.npmjs.com/package/ts-time-format" target="_blank">ts-time-format</a> is an extension of
    ts-time library with date/time formatting capabilities.</p>
    <pre>
    npm install --save ts-time-format
    </pre>
    <p>As opposed to ts-time, ts-time-format API is very different from Java 8 Date/Time API, because its author finds
    Java API for date/time formatting way too loose and error-prone. Implementation of ts-time-format is more strict -
    for every class of ts-time there's a specialized implementation of %TemporalFormatter supporting its own set of
    features. The library doesn't support date/time parsing by an arbitrary pattern.</p>
    <p>Project license is <a href="https://github.com/enepomnyaschih/ts-time/blob/master/LICENSE" target="_blank">MIT</a>.</p>
    <p>Find source code and bug tracker at <a href="https://github.com/enepomnyaschih/ts-time" target="_blank">GitHub</a>.</p>
  </div>

references:
  isBefore:
    file: ts-time/LocalDate
    member: isBefore

  plus:
    file: ts-time/LocalDate
    member: plus
