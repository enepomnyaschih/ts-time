# MIT License
#
# Copyright (c) 2019 Egor Nepomnyaschih
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

symbols:
  default:
    kind: class
    description: |
      There are exactly 7 days of week, with respective numeric values:
      <ol>
        <li>%MONDAY</li>
        <li>%TUESDAY</li>
        <li>%WEDNESDAY</li>
        <li>%THURSDAY</li>
        <li>%FRIDAY</li>
        <li>%SATURDAY</li>
        <li>%SUNDAY</li>
      </ol>
      You can't construct new days of week, you can only get an existing day of week directly or with %of method. With
      that said, the class doesn't provide <b>equals</b> method, as you can merely use JS operator === for equality
      check.

    properties:
      value:
        modifiers: readonly
        type: number
        description: Numeric value of the day.

    methods:
      compareTo:
        signature: |
          (other: %DayOfWeek): number
        params:
          other: Day of week to compare to.
        returns: |
          <ul>
            <li>0 if this is the same day of week;</li>
            <li>positive value if this day goes after %other;</li>
            <li>negative value if this day goes before %other.</li>
          </ul>
          Null and undefined are considered less than anything, except each other. %%null

      isBefore:
        signature: |
          (other: %DayOfWeek): boolean
        params:
          other: Day of week to compare to.
        returns: |
          True if this day goes before %other. Null and undefined go before anything, except each other. %%null

      isAfter:
        signature: |
          (other: %DayOfWeek): boolean
        params:
          other: Day of week to compare to.
        returns: |
          True if this day goes after %other. Null and undefined go before anything, except each other. %%null

    staticMethods:
      of:
        signature: |
          (value: number | %DayOfWeek): %DayOfWeek
        params:
          value: Numeric value of the day.
        returns: '%DayOfWeek representation of the day.'

      compareTo:
        signature: |
          (x: %DayOfWeek, y: %DayOfWeek): number
        params:
          x: One day.
          y: Another day.
        returns: |
          <ul>
            <li>0 if this is %x === %y;</li>
            <li>positive value if %x goes after %y;</li>
            <li>negative value if %x goes before %y.</li>
          </ul>
          Null and undefined are considered less than anything, except each other.

      isBefore:
        signature: |
          (x: %DayOfWeek, y: %DayOfWeek): boolean
        params:
          x: One day.
          y: Another day.
        returns: True if %x goes before %y. Null and undefined go before anything, except each other.

      isAfter:
        signature: |
          (x: %DayOfWeek, y: %DayOfWeek): boolean
        params:
          x: One day.
          y: Another day.
        returns: True if %x goes after %y. Null and undefined go before anything, except each other.

  MONDAY:
    type: '%DayOfWeek'
    description: '%DayOfWeek representation of Monday. Has numeric value of 1.'

  TUESDAY:
    type: '%DayOfWeek'
    description: '%DayOfWeek representation of Tuesday. Has numeric value of 2.'

  WEDNESDAY:
    type: '%DayOfWeek'
    description: '%DayOfWeek representation of Wednesday. Has numeric value of 3.'

  THURSDAY:
    type: '%DayOfWeek'
    description: '%DayOfWeek representation of Thursday. Has numeric value of 4.'

  FRIDAY:
    type: '%DayOfWeek'
    description: '%DayOfWeek representation of Friday. Has numeric value of 5.'

  SATURDAY:
    type: '%DayOfWeek'
    description: '%DayOfWeek representation of Saturday. Has numeric value of 6.'

  SUNDAY:
    type: '%DayOfWeek'
    description: '%DayOfWeek representation of Sunday. Has numeric value of 7.'

  DAYS_OF_WEEK:
    type: '%DayOfWeek[]'
    description: Array of all days of week, from %MONDAY to %SUNDAY.
