# MIT License
#
# Copyright (c) 2019-2022 Egor Nepomnyaschih
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

symbols:
  default:
    kind: class
    description: |
      <p>Comprises a specific date, merely as a tuple of (absolute year, month, day of month).</p>
    topics:
      construct:
        header: Construct
        text: |
          <p>A common way to construct an object in ts-time is to call its %of static method. For example, the
          following %LocalDate instances represent 15th of February, 2022:</p>
          <pre>
          %LocalDate.%of(2022, %FEBRUARY, 15);
          %LocalDate.%of(2022, 2, 15);
          </pre>
          <p>As opposed to Java API, there's no common way to get the current instance of an object in ts-time,
          because ts-time doesn't have a concept of default time zone. Instead, you must get the current %Instant
          and convert it to an object that you need, taking time zone into consideration.</p>
          <pre>
          %Instant.%now().%atZone(%UTC).%date;             // Current LocalDate in UTC
          %Instant.%now().%atZone(%LOCAL_ZONE_ID).%date;   // Current LocalDate in the local time zone
          %Instant.%now().%atZone(zone).%date;            // Current LocalDate in a given time zone
          </pre>
          <p>It makes ts-time API more robust. It leaves less room for a mistake.</p>
          <p>A common way to convert native JavaScript %Date object to a ts-time object is to call <b>fromNative*</b>
          static method:</p>
          <pre>
          %LocalDate.%fromNativeUtc(date);              // LocalDate equal to the given date in UTC
          %LocalDate.%fromNativeLocal(date);            // LocalDate equal to the given date in the local time zone
          %Instant.%fromNative(date).%atZone(zone).%date; // LocalDate equal to the given date in a given time zone
          </pre>
          <p>You can convert instances of other ts-time classes to %LocalDate via their properties and methods:</p>
          <pre>
          instant.%atZone(zone).%date;                  // From %Instant in a given %ZoneId/%ZoneOffset
          localDateTime.%dateOfLocal;                         // From %LocalDateTime
          offsetDateTime.%dateOfOffset;                        // From %OffsetDateTime in the same %ZoneOffset
          zonedDateTime.%date;                         // From %ZonedDateTime in the same %ZoneId
          </pre>
          <p>More sophisticated constructors: %ofEpochDay, %ofYearDay, %ofWeek, %ofWeekBasedYearDay.</p>
        references:
          dateOfLocal:
            file: ts-time/LocalDateTime
            member: date
            label: date
          now:
            file: ts-time/Instant
            member: now
            static: true
          atZone:
            file: ts-time/Instant
            member: atZone
          fromNative:
            file: ts-time/Instant
            member: fromNative
          dateOfOffset:
            file: ts-time/OffsetDateTime
            member: date
            label: date
          date:
            file: ts-time/ZonedDateTime
            member: date

      parse:
        header: Parse
        text: |
          <p>A common way to parse an ISO 8601 compliant string in ts-time is to call %parse static method. For example,
          the following %LocalDate instance represents 15th of February, 2022:</p></p>
          <pre>
          %LocalDate.%parse("2022-02-15");
          </pre>
          <p class="text-danger">The library doesn't yet support parsing non-compliant strings.</p>
        references:
          parse:
            file: ts-time/LocalDate
            member: parse
            static: true

      inspect:
        header: Inspect
        text: |
          <p>In the following example, we inspect various properties of a %LocalDate object. Please notice
          the difference in return value types:</p>
          <pre>
          const date           = %LocalDate.%of(2022, %FEBRUARY, 15);
          const year           = date.%year;            // 2022
          const month          = date.%month;           // %FEBRUARY
          const monthValue     = date.%month.%valueOfMonth;     // 2
          const dayOfMonth     = date.%dayOfMonth;      // 15
          const dayOfWeek      = date.%dayOfWeek;       // %TUESDAY
          const dayOfWeekValue = date.%dayOfWeek.%valueOfDay; // 2
          </pre>
          <p>More sophisticated features for %LocalDate inspection: %era, %yearOfEra, %weekBasedYear,
          %weekOfWeekBasedYear, %dayOfYear, %dayOfWeekBasedYear, %epochDay, %quarterOfYear, %isLeapYear,
          %lengthOfYear.</p>
        references:
          valueOfMonth:
            file: ts-time/Month
            member: value
            label: value
          valueOfDay:
            file: ts-time/DayOfWeek
            member: value
            label: value

      compare:
        header: Compare
        text: |
          <p>A common way to compare objects in ts-time is to call %equals, %isBefore, %isAfter, %compareTo methods:</p>
          <pre>
          const d1 = %LocalDate.%of(2022, %FEBRUARY, 15);
          const d2 = %LocalDate.%of(2022, %FEBRUARY, 16);
          d1.%equals(d2);    // false
          d1.%isBefore(d2);  // true
          d1.%isAfter(d2);   // false
          d1.%compareTo(d2); // -1
          </pre>
          <p>For nullable objects, use static methods instead. Null and undefined are considered less than anything,
          except each other.:</p>
          <pre>
          const d1 = null;
          const d2 = %LocalDate.%of(2022, %FEBRUARY, 16);
          %LocalDate.%equal(d1, d2);     // false
          %LocalDate.%isBeforeStatic(d1, d2);  // true
          %LocalDate.%isAfterStatic(d1, d2);   // false
          %LocalDate.%compare(d1, d2);   // -1
          </pre>
        references:
          isBeforeStatic:
            file: ts-time/LocalDate
            member: isBefore
            static: true
            label: isBefore
          isAfterStatic:
            file: ts-time/LocalDate
            member: isAfter
            static: true
            label: isAfter
          compare:
            file: ts-time/LocalDate
            member: compare
            static: true

      manipulation:
        header: Manipulate
        text: |
          <p>Every object in ts-time is immutable. Therefore every manipulation returns a new instance of an object.</p>
          <p>To add/subtract a period, call %plus/%minus method:</p>
          <pre>
          const date = %LocalDate.%of(2022, %FEBRUARY, 15);
          const d1 = date.%plus(%DAY_PERIOD);       // 16th of February, 2022
          const d2 = date.%plus(%Period.%ofDays(2)); // 17th of February, 2022
          const d3 = date.%minus(%MONTH_PERIOD);    // 15th of January, 2022
          </pre>
          <p>To change one of the components, preserving all the rest, call <b>with*</b> methods:</p>
          <pre>
          const date = %LocalDate.%of(2022, %FEBRUARY, 15);
          const d1 = date.%withYear(2025);         // 15th of February, 2025
          const d2 = date.%withMonth(%APRIL);       // 15th of April, 2022
          const d3 = date.%withDayOfMonth(10);     // 10th of February, 2022
          const d4 = date.%withDayOfWeek(%SUNDAY);  // 20th of February, 2022, Sunday
          </pre>
          <p>To truncate all less-significant components, call <b>truncate*</b> methods:</p>
          <pre>
          const date = %LocalDate.%of(2022, %FEBRUARY, 15);
          const d1 = date.%truncateToYear;         // 1st of January, 2022
          const d2 = date.%truncateToMonth;        // 1st of February, 2022
          const d3 = date.%truncateToWeek;         // 14th of February, 2022, Monday
          </pre>
          <p><span class="text-danger">The library doesn't yet support Sunday as the 1st day of the week.</span>
          But there's a workaround:</p>
          <pre>
          const d4 = date.%minus(%Period.%ofDays(date.%dayOfWeek.%valueOfDayOfWeek % 7)); // 13th of February, 2022, Sunday
          </pre>
          <p>Or a flexible solution, where firstDayOfWeek is 1 for Monday, and 7 for Sunday:
          <pre>
          const d5 = date.%minus(%Period.%ofDays((date.%dayOfWeek.%valueOfDayOfWeek + 7 - firstDayOfWeek) % 7));
          </pre>
          <p>More sophisticated features for %LocalDate manipulation: %withDayOfYear, %truncateToWeekBasedYear.</p>
        references:
          ofDays:
            file: ts-time/Period
            member: ofDays
            static: true
          valueOfDayOfWeek:
            file: ts-time/DayOfWeek
            member: value
            label: value

      conversion:
        header: Convert
        text: |
          <p>You can convert %LocalDate to other kinds of objects via its properties and methods:</p>
          <pre>
          const date = %LocalDate.%of(2022, %FEBRUARY, 15);
          date.%atStartOfDay;                      // To %LocalDateTime at midnight
          date.%atTime(%MIDNIGHT);                  // Equivalent
          date.%atTime(time);                      // To %LocalDateTime at a given time
          date.%atTime(time).%atOffset(offset);     // To %OffsetDateTime at a given time in a given %ZoneOffset
          date.%atTime(time).%atZone(zone);         // To %ZonedDateTime at a given time in a given %ZoneId
          date.%atTime(time).%atZone(zone).%instant; // To %Instant at a given time in a given %ZoneId/%ZoneOffset
          </pre>
          <p>You can as well convert %LocalDate to a native JavaScript %Date:</p>
          <pre>
          const date = %LocalDate.%of(2022, %FEBRUARY, 15);
          date.%nativeUtc;                         // Date representing 15th of February, 2022, midnight in UTC
          date.%nativeLocal;                       // Date representing 15th of February, 2022, midnight in the local time zone
          date.%atStartOfDay.%atZone(zone).%native;  // Date representing 15th of February, 2022, midnight in a given time zone
          date.%atTime(time).%atZone(zone).%native;  // Date representing 15th of February, 2022, at a given time in a given time zone
          </pre>
          <p>For backward conversion, see %construct.</p>
        references:
          atOffset:
            file: ts-time/LocalDateTime
            member: atOffset
          atZone:
            file: ts-time/LocalDateTime
            member: atZone
          instant:
            file: ts-time/ZonedDateTime
            member: instant
          native:
            file: ts-time/ZonedDateTime
            member: native
          construct:
            href: '#construct'
            label: Construct

      format:
        header: Format
        text: |
          <p>Every class in ts-time has ISO 8601 compliant %toString method:</p>
          <pre>
          const date = %LocalDate.%of(2022, %FEBRUARY, 15);
          date.%toString(); // "2022-02-15"
          </pre>
          <p>For more sophisticated string formatting, add ts-time-format library to your list of dependencies:</p>
          <pre>
          npm install --save ts-time-format
          </pre>
          <p>Now you can construct an instance of %DateFormatter in order to format arbitrary %LocalDate instances:</p>
          <pre>
          const formatter = %DateFormatter.%ofPattern("dd.MMM'yy");
          const date = %LocalDate.%of(2022, %FEBRUARY, 15);
          formatter.%format(date); // "15.Feb'22"
          </pre>
          <p>You can define a custom %context object to internationalize the formatted strings:</p>
          <pre>
          const context = {monthShortNames: ["Янв", "Фев", "Мар"]};
          formatter.%format(date, context); // "15.Фев'22"
          </pre>
        references:
          toString:
            file: ts-time/LocalDate
            member: toString
          ofPattern:
            file: ts-time-format/DateFormatter
            member: ofPattern
            static: true
          format:
            file: ts-time-format/DateFormatter
            member: format
          context:
            file: ts-time-format/constants
            symbol: DEFAULT_TEMPORAL_CONTEXT

    properties:
      nativeLocal:
        modifiers: readonly
        type: Date
        description: |
          Native JS Date representing this local date in the browser time zone at %MIDNIGHT,
          for compatibility with native and third party API.

      nativeUtc:
        modifiers: readonly
        type: Date
        description: |
          Native JS Date representing this local date in %UTC at %MIDNIGHT,
          for compatibility with native and third party API.

      era:
        modifiers: readonly
        type: '%Era'
        description: Era of this local date.

      year:
        modifiers: readonly
        type: number
        description: Absolute year.

      yearOfEra:
        modifiers: readonly
        type: number
        description: Year of era. See %Era for details.

      weekBasedYear:
        modifiers: readonly
        type: number
        description: |
          Absolute week based year. %%weekBased

      month:
        modifiers: readonly
        type: '%Month'
        description: Month.

      weekOfWeekBasedYear:
        modifiers: readonly
        type: number
        description: |
          1-based week of week-based year. %%weekBased

      dayOfYear:
        modifiers: readonly
        type: number
        description: 1-based day of year.

      dayOfWeekBasedYear:
        modifiers: readonly
        type: number
        description: |
          1-based day of week-based year. %%weekBased

      dayOfMonth:
        modifiers: readonly
        type: number
        description: 1-based day of month.

      dayOfWeek:
        modifiers: readonly
        type: '%DayOfWeek'
        description: Day of week.

      epochDay:
        modifiers: readonly
        type: number
        description: 1-based day since epoch (i.e. 1st of %JANUARY 1970 is the 1st epoch day).

      quarterOfYear:
        modifiers: readonly
        type: number
        description: 1-based quarter of year.

      isLeapYear:
        modifiers: readonly
        type: boolean
        description: True if this is a leap year.

      lengthOfYear:
        modifiers: readonly
        type: number
        description: Number of days in this year (365 for non-leap, 366 for leap).

      atStartOfDay:
        modifiers: readonly
        type: '%LocalDateTime'
        description: Start of the day (i.e. %MIDNIGHT).

      truncateToYear:
        modifiers: readonly
        type: '%LocalDate'
        description: Start of the year (i.e. the 1st of %JANUARY).

      truncateToWeekBasedYear:
        modifiers: readonly
        type: '%LocalDate'
        description: Start of the week-based year (i.e. %MONDAY, %MIDNIGHT). %%weekBased

      truncateToMonth:
        modifiers: readonly
        type: '%LocalDate'
        description: Start of the month (i.e. 1st day of one).

      truncateToWeek:
        modifiers: readonly
        type: '%LocalDate'
        description: Start of the week (i.e. Monday).

    methods:
      compareTo:
        signature: |
          (other: %LocalDate): number
        params:
          other: Local date to compare to.
        returns: |
          <ul>
            <li>0 if this is the same local date;</li>
            <li>positive value if this local date goes after %other;</li>
            <li>negative value if this local date goes before %other.</li>
          </ul>
          Null and undefined are considered less than anything, except each other. %%null

      equals:
        signature: |
          (other: %LocalDate): boolean
        params:
          other: Local date to compare to.
        returns: |
          True if this local date is equal to %other. Null and undefined are only equal to each other. %%null

      isBefore:
        signature: |
          (other: %LocalDate): boolean
        params:
          other: Local date to compare to.
        returns: |
          True if this local date goes before %other. Null and undefined go before anything, except each other. %%null

      isAfter:
        signature: |
          (other: %LocalDate): boolean
        params:
          other: Local date to compare to.
        returns: |
          True if this local date goes after %other. Null and undefined go before anything, except each other. %%null

      atTime:
        signature: |
          (time: %LocalTime): %LocalDateTime
        params:
          time: Local time.
        returns: Local date/time at the specified time.

      plus:
        signature: |
          (period: %Period): %LocalDate
        params:
          period: '%Period to add.'
        returns: New %LocalDate shifted onwards from this one by the specified period.

      minus:
        signature: |
          (period: %Period): %LocalDate
        params:
          period: '%Period to subtract.'
        returns: New %LocalDate shifted backwards from this one by the specified period.

      withYear:
        signature: |
          (year: number): %LocalDate
        params:
          year: Absolute year.
        returns: |
          New %LocalDate with the specified year and its current month/day of month. If such date doesn't exist, it
          shifts the date back to the nearest valid one (e.g. 29th of %FEBRUARY in 2019 gets shifted to 28th of
          %FEBRUARY).

      withMonth:
        signature: |
          (month: number | %Month): %LocalDate
        params:
          month: Month.
        returns: |
          New %LocalDate with the specified month and its current year/day of month. If such date doesn't exist, it
          shifts the date back to the nearest valid one (e.g. 31st of %APRIL gets shifted to 30th of %APRIL).

      withDayOfMonth:
        signature: |
          (dayOfMonth: number): %LocalDate
        params:
          dayOfMonth: 1-based day of month.
        returns: New %LocalDate with the specified day of month and its current year/month.

      withDayOfWeek:
        signature: |
          (dayOfWeek: number | %DayOfWeek): %LocalDate
        params:
          dayOfWeek: Day of week or its numeric value
        returns: New %LocalDate with the specified day of week and its current week.

      withDayOfYear:
        signature: |
          (dayOfYear: number): %LocalDate
        params:
          dayOfYear: 1-based day of year.
        returns: New %LocalDate with the specified day of year and its current year.

      toString:
        signature: |
          (): string
        returns: String representation of the date in ISO format, such as "2019-12-30".

    staticMethods:
      of:
        signature: |
          (year: number, month: number | %Month = %JANUARY, dayOfMonth: number = 1): %LocalDate
        params:
          year: Absolute year.
          month: Month or its numeric value.
          dayOfMonth: 1-based day of month.
        returns: '%LocalDate representation.'

      ofEpochDay:
        signature: |
          (epochDay: number): %LocalDate
        params:
          epochDay: 1-based epoch day (i.e. 1st of %JANUARY 1970 is the 1st epoch day).
        returns: '%LocalDate representation.'

      ofYearDay:
        signature: |
          (year: number, dayOfYear: number): %LocalDate
        params:
          year: Absolute year.
          dayOfYear: 1-based day of year.
        returns: '%LocalDate representation.'

      ofWeek:
        signature: |
          (year: number, week: number, dayOfWeek: number | %DayOfWeek): %LocalDate
        params:
          year: Absolute week based year.
          week: 1-based week of the year.
          dayOfWeek: Day of week or its numeric value.
        returns: '%LocalDate representation.'
        description: '%%weekBased'

      ofWeekBasedYearDay:
        signature: |
          (year: number, dayOfWeekBasedYear: number): %LocalDate
        params:
          year: Absolute week based year.
          dayOfWeekBasedYear: 1-based day of the week based year.
        returns: '%LocalDate representation.'
        description: '%%weekBased'

      fromNativeLocal:
        signature: |
          (date: Date): %LocalDate
        params:
          date: Native JS date.
        returns: |
          %LocalDate representation of %date at %MIDNIGHT in the browser time zone,
          for compatibility with native and third party API.

      fromNativeUtc:
        signature: |
          (date: Date): %LocalDate
        params:
          date: Native JS date.
        returns: |
          %LocalDate representation of %date at %MIDNIGHT in %UTC,
          for compatibility with native and third party API.

      parse:
        signature: |
          (str: string): %LocalDate throws %TemporalParsingError
        params:
          str: String representation of a local date in ISO format, such as '2019-12-30'.
        returns: '%LocalDate representation.'

      compare:
        signature: |
          (x: %LocalDate, y: %LocalDate): number
        params:
          x: One local date.
          y: Another local date.
        returns: |
          <ul>
            <li>0 if this %x and %y are the same local dates;</li>
            <li>positive value if %x goes after %y;</li>
            <li>negative value if %x goes before %y.</li>
          </ul>
          Null and undefined are considered less than anything, except each other.

      equal:
        signature: |
          (x: %LocalDate, y: %LocalDate): boolean
        params:
          x: One local date.
          y: Another local date.
        returns: True if %x is equal to %y. Null and undefined are only equal to each other.

      isBefore:
        signature: |
          (x: %LocalDate, y: %LocalDate): boolean
        params:
          x: One local date.
          y: Another local date.
        returns: True if %x goes before %y. Null and undefined go before anything, except each other.

      isAfter:
        signature: |
          (x: %LocalDate, y: %LocalDate): boolean
        params:
          x: One local date.
          y: Another local date.
        returns: True if %x goes after %y. Null and undefined go before anything, except each other.

  EPOCH_DATE:
    type: '%LocalDate'
    description: '%LocalDate with %epochDay = 1, i.e. representing ECMAScript epoch (1st of %JANUARY 1970).'
    references:
      epochDay:
        symbol: default
        member: epochDay
